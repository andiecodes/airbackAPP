#!/bin/bash
#
# 20200404 Jens Heine
# 20200413 Jens Heine: FTPS mode enabled
# 20200710 Jens Heine <binbash@gmx.net>
#          Dennis Brossat <dennis.brossat@email.de>
#          Benjamin Heine <benjaminheine@gmx.net>
#
# airback - backup your mobile device over wifi
#
#set -e
#set -x

#
# VARIABLES
#
# Base directory for airback
VERSION="20200714"
AIRBACK_ROOT_DIR="$HOME/airback"
AIRBACK_CONFIG_FILE="${AIRBACK_ROOT_DIR}/airback.conf"
DEBUG=0
REMOTE_IS_ALREADY_MOUNTED=0
VERBOSITY="v"
RSYNC_CMD="nice -n 20 rsync -${VERBOSITY}rultR --chmod=774"
NMAP_CMD="nice -n 20 nmap "
USAGE_INFO_TEXT="

        airback by Jens Heine <binbash@gmx.net> 2020
                   and Dennis Brossat <dennis.brossat@email.de>
                   and Benjamin Heine <benjaminheine@gmx.net>

USAGE

        airback OPTIONS

OPTIONS
        -c            : Show config file
        -d            : Show debug infos
        -h            : Show usage information
	-S [VARIABLE] : set VARIABLE to set in config file (use together with -V)
	-V [VALUE]    : set VALUE to set variable to value in config file (use together with -S)
        -v            : Show program version

"


#
# FUNCTIONS
#
# Args: IP PORT
checkForRunningPortServer() {
	logInfo "Checking for mobile..."
	[ "$1" -a "$2" ] || {
		echo "Host or port missing."
		exit 1
	}
	${NMAP_CMD} ${1} -p ${2} | grep "open" >/dev/null 2>&1
	RET_VAL=$?
	[ "${RET_VAL}" -eq 0 ] && {
		logInfo "Mobile "$1" port "$2" found."
		return 0
	}
	logInfo "Mobile "$1" port "$2" not found."
	return 1
}

function logInfo() {
	[ $DEBUG -eq 0 ] && return
	echo "> ${1}"
}

function checkLocalMobileMountpointBase() {
	[ -d ${LOCAL_MOBILE_MOUNTPOINT_BASE} ] || {
        	logInfo "Local mobile mountpoint base folder not found: ${LOCAL_MOBILE_MOUNTPOINT_BASE}"
	        mkdir -p ${LOCAL_MOBILE_MOUNTPOINT_BASE} >/dev/null 2>&1
	        RET_VAL=$?
	        [ $RET_VAL -ne 0 ] && {
        	        echo "Error creating local mobile mountpoint base folder."
                	exit 1
	        }
	        echo "Local local mobile mountpoint base folder ${LOCAL_MOBILE_MOUNTPOINT_BASE} created."
	}
}

function checkLocalBackupTargetBaseDir() {
	[ -d ${LOCAL_BACKUP_TARGET_BASE_DIR} ] || {
	        logInfo "Local backup target base folder not found: ${LOCAL_BACKUP_TARGET_BASE_DIR}"
	        mkdir -p ${LOCAL_BACKUP_TARGET_BASE_DIR} >/dev/null 2>&1
	        RET_VAL=$?
	        [ $RET_VAL -ne 0 ] && {
	                echo "Error creating local backup target base folder ${LOCAL_BACKUP_TARGET_BASE_DIR}."
	                exit 1
	        }
	        echo "Local backup target base folder ${LOCAL_BACKUP_TARGET_BASE_DIR} created."
	}
}

function doBackup() {
	logInfo "Starting doBackup"
}

function mountMobile() {
	logInfo "Trying to mount mobile."
	df -h|grep ${LOCAL_MOBILE_MOUNTPOINT_BASE} 2>&1 >/dev/null
	REMOTE_IS_ALREADY_MOUNTED=$?
	if [ "$REMOTE_IS_ALREADY_MOUNTED" != 0 ];then
		set -e
		curlftpfs -r -o ssl,no_verify_hostname,no_verify_peer,user=${MOBILE_USER}:${MOBILE_USER_PASS} ftps://${MOBILE_HOST}:${MOBILE_PORT}/ ${LOCAL_MOBILE_MOUNTPOINT_BASE}
		set +e
		logInfo "Mobile mounted."
		return 0
	else
		logInfo "Mobile is already mounted."
		return 1
	fi
}

function doBackup() {
	mountMobile
	cd ${LOCAL_MOBILE_MOUNTPOINT_BASE}

#	set +e
	#-------------Copy Folders START-------------------#
#	logInfo  "Syncing DCIM/Camera..."
#	${RSYNC_CMD} DCIM/Camera ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing DCIM/Screenshots..."
#	${RSYNC_CMD} DCIM/Screenshots ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing Pictures..."
#	${RSYNC_CMD} Pictures ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing Movies..."
#	${RSYNC_CMD} Movies ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
	logInfo  "Syncing Music..."
	${RSYNC_CMD} Music ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing Telegram..."
#	${RSYNC_CMD} Telegram ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing WhatsApp..."
#	${RSYNC_CMD} WhatsApp ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing Signal..."
#	${RSYNC_CMD} Signal ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#-------------Copy Folders END---------------------#
#	set -e

	cd - 2>&1 >/dev/null
	logInfo  "Unmounting mobile filesystem..."
	sleep ${SLEEP_TIME_TO_WAIT_FOR_MOBILE_FLUSH}
	fusermount -u ${LOCAL_MOBILE_MOUNTPOINT_BASE}
	RET_VAL=$?
	[ $RET_VAL -ne 0 ] && {
		logInfo "Error unmounting mobile."
		return
	}
	logInfo "Mobile unmounted."
}

function createDefaultConfigFile() {
	[ -d ${AIRBACK_ROOT_DIR} ] || {
		logInfo "Root folder not found."
		echo "Creating root folder: ${AIRBACK_ROOT_DIR}"
		mkdir -p ${AIRBACK_ROOT_DIR}
	}
	echo "Creating default conf file ${AIRBACK_CONFIG_FILE}"
	echo "Edit config file for your needs and restart airback."
echo '
#
# airback.conf
#
# 20200709 jens heine <binbash@gmx.net>
#          Dennis Brossat <dennis.brossat@email.de>
#          Benjamin Heine <benjaminheine@gmx.net>
#
# Configuration file for airback - backup your mobile device over wifi
#

# Local folder where remote device will be mounted
LOCAL_MOBILE_MOUNTPOINT_BASE="${AIRBACK_ROOT_DIR}/mnt"
# Local folder where remote files will be saved
LOCAL_BACKUP_TARGET_BASE_DIR="${AIRBACK_ROOT_DIR}/backup"
# Remote access configuration
# Note: Enable implicit ssl mode on server
# REMOTE_FTPS_HOST="IP:PORT"
MOBILE_HOST="192.168.1.21"
MOBILE_PORT="10000"
MOBILE_USER="ftpuser"
MOBILE_USER_PASS="pass"
# Run airback as a daemon who polls for the mobile
RUN_AS_DAEMON=1
# Polling interval to find the mobile in seconds
SEARCH_MOBILE_INTERVAL_SEC=5
# Interval for doing backups
BACKUP_INTERVAL_SEC=600
SLEEP_TIME_TO_WAIT_FOR_MOBILE_FLUSH=3
' > ${AIRBACK_CONFIG_FILE}	
	exit 0
}

function checkForCommand() {
	[ ! "${1}" ] && {
		logInfo "Error: no command given to check."
		return 0
	}
	logInfo "Checking if ${1} is installed."
        which "${1}" >/dev/null 2>&1
        RET_VAL=$?
        [ "$RET_VAL" -ne 0 ] && {
                echo "Error: ${1} not found." 1>&2
                echo "Please install ${1}. For example: apt-get install ${1}" 1>&2
		return 1
        }
	logInfo "Success: command ${1} is installed."
	return 0
}

#
# check if all needed tools are available
#
function checkDependencies() {
	DEPENDENCY_ERRORS=0
	logInfo "Checking dependencies..."

	checkForCommand "rsync"
	let DEPENDENCY_ERRORS=$DEPENDENCY_ERRORS+$?
	checkForCommand "nice"
	let DEPENDENCY_ERRORS=$DEPENDENCY_ERRORS+$?
	checkForCommand "nmap"
	let DEPENDENCY_ERRORS=$DEPENDENCY_ERRORS+$?
	checkForCommand "curlftpfs"
	let DEPENDENCY_ERRORS=$DEPENDENCY_ERRORS+$?

	[ $DEPENDENCY_ERRORS -eq 0 ] && {
		logInfo "Dependency check OK."
		return 0
	} 
	logInfo "Dependency check had errors."
	return 1
}

function showUsage() {
	echo "$USAGE_INFO_TEXT"
}

function showVersionInfo() {
	echo
	echo "airback version: $VERSION"
	echo
}

function showConfigFile() {
	echo 
	echo "airback configuration file"
	echo "File: ${AIRBACK_CONFIG_FILE}"
	echo
	cat ${AIRBACK_CONFIG_FILE}
}

function setVariableInConfigFile() {
        [ ! "${1}" ] && {
                logInfo "Error: Variable name missing."
                return 1
        }
        [ ! "${2}" ] && {
                logInfo "Error: Value for variable missing."
                return 1
        }

	logInfo "Setting new value for variable in config file:"
	logInfo "Variable : ${1}"
	logInfo "Value    : ${2}"
	SED_PARAM="s/${1}=.*$/${1}=\"${2}\"/g"
	sed -i "$SED_PARAM" ${AIRBACK_CONFIG_FILE}
	RET_VAL=$?
	if [ "$RET_VAL" -eq 0 ];then
		logInfo "Variable ${1} set to ${2} in configfile ${AIRBACK_CONFIG_FILE}."
	else
		echo "Error setting variable ${1} to ${2} in configfile ${AIRBACK_CONFIG_FILE}." 1>&2
	fi
}

#
# MAIN
#

ACTION=""
while getopts "cdhS:vV:" options;do
	case "$options" in
		c) showConfigFile
		   exit 0
		   ;;
		d) DEBUG=1
		   ;;
		h) showUsage
		   exit 0
		   ;;
		S) ACTION="SET_VARIABLE_IN_CONFIG"
		   VAR_NAME=${OPTARG}
		   ;;
		V) ACTION="SET_VARIABLE_IN_CONFIG"
		   VAR_VALUE=${OPTARG}
		   ;;
		v) showVersionInfo
		   exit 0
		   ;;
		*) showUsage
		   exit 0
		   ;;
	esac
done

if [ "$ACTION" = "SET_VARIABLE_IN_CONFIG" ];then
	echo
	logInfo "Set variable in config file"
	[ ! "$VAR_NAME" -o ! "$VAR_VALUE" ] && {
		echo "Error: Variable name or value missing." 1>&2
		echo
		echo "Try -h for help."
		echo
		exit 1
	}
	setVariableInConfigFile "${VAR_NAME}" "${VAR_VALUE}"
	RET_VAL=$?
	[ "$RET_VAL" -ne 0 ] && {
		echo "Error setting ${VAR_NAME} set to ${VAR_VALUE}." 1>&2
		exit 1
	}
	echo "Variable ${VAR_NAME} set to ${VAR_VALUE}"
	echo
	exit 0
fi

checkDependencies || {
	echo "Missing dependecies. Please install the missing commands and restart."
	exit 1
}

# Check and source config file
[ -r ${AIRBACK_CONFIG_FILE} ] || {
	echo "Error config file not found: ${AIRBACK_CONFIG_FILE}"
	createDefaultConfigFile
}

. ${AIRBACK_CONFIG_FILE}

checkLocalMobileMountpointBase
checkLocalBackupTargetBaseDir

while true;do
	checkForRunningPortServer "$MOBILE_HOST" "$MOBILE_PORT"
	RET_VAL=$?
	while [ $RET_VAL -ne 0 ];do
		logInfo "Host not found, sleeping..."
		sleep ${SEARCH_MOBILE_INTERVAL_SEC}
		checkForRunningPortServer "$MOBILE_HOST" "$MOBILE_PORT"
		RET_VAL=$?
	done
	logInfo "Server found."
	doBackup
	logInfo "Backup done. Sleeping..."
	[ "$RUN_AS_DAEMON" -eq 0 ] && {
		logInfo "Not running in daemon mode. Exiting."
		exit 0
	}	
	logInfo "Sleeping ${BACKUP_INTERVAL_SEC} seconds before next backup."
	sleep ${BACKUP_INTERVAL_SEC}
done
echo "Exiting airback."

exit 0


