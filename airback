#!/bin/bash
#
# 20200404 jens heine
# 20200413 jens heine: FTPS mode enabled
# 20200710 jens heine <binbash@gmx.net>
#          benjamin heine
#          dennis brossat
#
# airback - backup your mobile device over wifi
#
#set -e
#set -x

#
# VARIABLES
#
# Base directory for airback
AIRBACK_ROOT_DIR="$HOME/airback"
AIRBACK_CONFIG_FILE="${AIRBACK_ROOT_DIR}/airback.conf"
DEBUG=1
REMOTE_IS_ALREADY_MOUNTED=0
VERBOSITY="v"
RSYNC_CMD="nice -n 20 rsync -${VERBOSITY}rultR --chmod=774"
NMAP_CMD="nice -n 20 nmap "

#
# MAIN
#

# Check and source config file
[ -r ${AIRBACK_CONFIG_FILE} ] || {
	echo "Error config file not found: ${AIRBACK_CONFIG_FILE}"
	exit 1
}
. ${AIRBACK_CONFIG_FILE}

# todo check config variables...

#
# FUNCTIONS
#
# Args: IP PORT
checkForRunningPortServer() {
	logInfo "Checking for mobile..."
	[ "$1" -a "$2" ] || {
		echo "Host or port missing."
		exit 1
	}
	${NMAP_CMD} ${1} -p ${2} | grep "open" >/dev/null 2>&1
	RET_VAL=$?
	[ "${RET_VAL}" -eq 0 ] && {
		logInfo "Mobile "$1" port "$2" found."
		return 0
	}
	logInfo "Mobile "$1" port "$2" not found."
	return 1
}

function logInfo() {
	[ $DEBUG -eq 0 ] && return
	echo "> ${1}"
}

function checkLocalMobileMountpointBase() {
	[ -d ${LOCAL_MOBILE_MOUNTPOINT_BASE} ] || {
        	logInfo "Local mobile mountpoint base folder not found: ${LOCAL_MOBILE_MOUNTPOINT_BASE}"
	        mkdir -p ${LOCAL_MOBILE_MOUNTPOINT_BASE} >/dev/null 2>&1
	        RET_VAL=$?
	        [ $RET_VAL -ne 0 ] && {
        	        echo "Error creating local mobile mountpoint base folder."
                	exit 1
	        }
	        echo "Local local mobile mountpoint base folder ${LOCAL_MOBILE_MOUNTPOINT_BASE} created."
	}
}

function checkLocalBackupTargetBaseDir() {
	[ -d ${LOCAL_BACKUP_TARGET_BASE_DIR} ] || {
	        logInfo "Local backup target base folder not found: ${LOCAL_BACKUP_TARGET_BASE_DIR}"
	        mkdir -p ${LOCAL_BACKUP_TARGET_BASE_DIR} >/dev/null 2>&1
	        RET_VAL=$?
	        [ $RET_VAL -ne 0 ] && {
	                echo "Error creating local backup target base folder ${LOCAL_BACKUP_TARGET_BASE_DIR}."
	                exit 1
	        }
	        echo "Local backup target base folder ${LOCAL_BACKUP_TARGET_BASE_DIR} created."
	}
}

function doBackup() {
	logInfo "Starting doBackup"
}

function mountMobile() {
	logInfo "Trying to mount mobile."
	df -h|grep ${LOCAL_MOBILE_MOUNTPOINT_BASE} 2>&1 >/dev/null
	REMOTE_IS_ALREADY_MOUNTED=$?
	if [ "$REMOTE_IS_ALREADY_MOUNTED" != 0 ];then
		set -e
		curlftpfs -r -o ssl,no_verify_hostname,no_verify_peer,user=${MOBILE_USER}:${MOBILE_USER_PASS} ftps://${MOBILE_HOST}:${MOBILE_PORT}/ ${LOCAL_MOBILE_MOUNTPOINT_BASE}
		set +e
		logInfo "Mobile mounted."
		return 0
	else
		logInfo "Mobile is already mounted."
		return 1
	fi
}

function doBackup() {
	mountMobile
	cd ${LOCAL_MOBILE_MOUNTPOINT_BASE}

#	set +e
	#-------------Copy Folders START-------------------#
#	logInfo  "Syncing DCIM/Camera..."
#	${RSYNC_CMD} DCIM/Camera ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing DCIM/Screenshots..."
#	${RSYNC_CMD} DCIM/Screenshots ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing Pictures..."
#	${RSYNC_CMD} Pictures ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing Movies..."
#	${RSYNC_CMD} Movies ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
	logInfo  "Syncing Music..."
	${RSYNC_CMD} Music ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing Telegram..."
#	${RSYNC_CMD} Telegram ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing WhatsApp..."
#	${RSYNC_CMD} WhatsApp ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#--------------------------------------------------#
#	logInfo  "Syncing Signal..."
#	${RSYNC_CMD} Signal ${LOCAL_BACKUP_TARGET_BASE_DIR}
	#-------------Copy Folders END---------------------#
#	set -e

	cd - 2>&1 >/dev/null
	logInfo  "Unmounting mobile filesystem..."
	sleep ${SLEEP_TIME_TO_WAIT_FOR_MOBILE_FLUSH}
	fusermount -u ${LOCAL_MOBILE_MOUNTPOINT_BASE}
	RET_VAL=$?
	[ $RET_VAL -ne 0 ] && {
		logInfo "Error unmounting mobile."
		return
	}
	logInfo "Mobile unmounted."
}

#
# MAIN
#

checkLocalMobileMountpointBase
checkLocalBackupTargetBaseDir

while true;do
	checkForRunningPortServer "$MOBILE_HOST" "$MOBILE_PORT"
	RET_VAL=$?
	while [ $RET_VAL -ne 0 ];do
		logInfo "Host not found, sleeping..."
		sleep ${SEARCH_MOBILE_INTERVAL_SEC}
		checkForRunningPortServer "$MOBILE_HOST" "$MOBILE_PORT"
		RET_VAL=$?
	done
	logInfo "Server found."
	doBackup
	logInfo "Backup done. Sleeping..."
	[ "$RUN_AS_DAEMON" -eq 0 ] && {
		logInfo "Not running in daemon mode. Exiting."
		exit 0
	}	
	logInfo "Sleeping ${BACKUP_INTERVAL_SEC} seconds before next backup."
	sleep ${BACKUP_INTERVAL_SEC}
done
echo "Exiting airback."

exit 0


